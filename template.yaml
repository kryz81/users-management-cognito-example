AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 20
    Runtime: java11
    MemorySize: 512
    Environment:
      Variables:
        CLIENT_ID: '{{resolve:ssm:users-client-id:1}}'
        CLIENT_SECRET: '{{resolve:ssm:users-client-secret:1}}'
        COGNITO_USER_POOL_ID: '{{resolve:ssm:users-cognito-user-pool-id:1}}'
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        DefaultAuthorizer: LambdaAuthorizer
        Authorizers:
          LambdaAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt LambdaAuthorizer.Arn
            FunctionInvokeRole: !GetAtt LambdaAuthorizerAccessRole.Arn
            EnableSimpleResponses: true
            AuthorizerPayloadFormatVersion: "2.0"
            Identity:
              Headers:
                - Authorization

  Test:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UsersManagement
      Handler: dev.kryz.handlers.Test::handleRequest
      Architectures:
        - x86_64
      Events:
        SignUp:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: NONE

  UserSignUp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UsersManagement
      Handler: dev.kryz.handlers.UserSignUp::handleRequest
      Architectures:
        - x86_64
      Events:
        SignUp:
          Type: HttpApi
          Properties:
            Path: /signup
            Method: POST
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: NONE

  UserConfirmSignUp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UsersManagement
      Handler: dev.kryz.handlers.UserConfirmSignUp::handleRequest
      Architectures:
        - x86_64
      Events:
        Confirm:
          Type: HttpApi
          Properties:
            Path: /confirm
            Method: POST
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: NONE

  Login:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UsersManagement
      Handler: dev.kryz.handlers.Login::handleRequest
      Architectures:
        - x86_64
      Events:
        Login:
          Type: HttpApi
          Properties:
            Path: /login
            Method: POST
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: NONE

  AddUserToGroup:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UsersManagement
      Handler: dev.kryz.handlers.AddUserToGroup::handleRequest
      Architectures:
        - x86_64
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'cognito-idp:AdminAddUserToGroup'
              Resource: '{{resolve:ssm:users-cognito-user-pool-arn:1}}'
      Events:
        AddUserToGroup:
          Type: HttpApi
          Properties:
            Path: /addUserToGroup
            Method: POST
            ApiId: !Ref HttpApi

  AuthUserDetails:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UsersManagement
      Handler: dev.kryz.handlers.AuthUserDetails::handleRequest
      Architectures:
        - x86_64
      Events:
        AuthUserDetails:
          Type: HttpApi
          Properties:
            Path: /users/me
            Method: GET
            ApiId: !Ref HttpApi

  UserDetails:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UsersManagement
      Handler: dev.kryz.handlers.UserDetails::handleRequest
      Architectures:
        - x86_64
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'cognito-idp:AdminGetUser'
              Resource: '{{resolve:ssm:users-cognito-user-pool-arn:1}}'
      Events:
        AuthUserDetails:
          Type: HttpApi
          Properties:
            Path: /users/{userName}
            Method: GET
            ApiId: !Ref HttpApi

  LambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UsersManagement
      Handler: dev.kryz.services.authorizers.LambdaAuthorizer::handleRequest
      Architectures:
        - x86_64

  LambdaAuthorizerAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: MyPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: !GetAtt LambdaAuthorizer.Arn

Outputs:
  UsersManagementEndpoint:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/"
